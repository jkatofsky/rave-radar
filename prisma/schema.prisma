generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum OrganizerType {
  BarOrClub
  EventCollective
  MusicFestival
}

model Organizer {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  // TODO: slight issue: this updates whenever we add a review, since there are the denormalized fields
  // So, when fleshing out the editing system, I'll need to rely on other information to timestamp the REAL last organizer update
  updatedAt DateTime @updatedAt

  name      String
  type      OrganizerType
  websites  String[]
  locations Location[]

  reviews   Review[]
  topGenres Genre[]

  overallExpensiveness Int?

  reviewCount Int // TODO: de-denormalize? https://www.prisma.io/docs/orm/prisma-client/queries/aggregation-grouping-summarizing#count-relations

  overallRating          Float?
  soundSystemRating      Float?
  djAndMusicRating       Float?
  crowdPlurRating        Float?
  safetyAndComfortRating Float?
  venueRating            Float?
  valueForMoneyRating    Float?
  visualsRating          Float?
  staffRating            Float?
  foodAndDrinkRating     Float?
}

model City {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  locations Location[]

  name    String
  region  String?
  country String
}

model Location {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organizer   Organizer @relation(fields: [organizerId], references: [id])
  organizerId String

  city   City   @relation(fields: [cityId], references: [id])
  cityId String

  streetAddress String?
  postalCode    String?

  // TODO: lat/lng? Can be cached from maps API for up to 30 days...
}

enum Genre {
  House
  DeepHouse
  ProgressiveHouse
  TechHouse
  AcidHouse
  TropicalHouse
  FutureHouse
  AfroHouse
  Techno
  Psytrance
  MelodicTechno
  HardTechno
  AcidTechno
  Trance
  Dubstep
  MelodicDubstep
  Brostep
  Chillstep
  DrumAndBass
  Hardstyle
  Ambient
  Disco
  Funk
  Trap
  Electro
  Garage
  Breakbeat
  Chillout
  BigRoom
  BassHouse
  Hyperpop
  Jungle
  Downtempo
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organizer   Organizer @relation(fields: [organizerId], references: [id])
  organizerId String

  description String?
  genres      Genre[]

  expensiveness Int?

  soundSystemRating      Int
  djAndMusicRating       Int
  crowdPlurRating        Int
  safetyAndComfortRating Int
  venueRating            Int
  valueForMoneyRating    Int
  visualsRating          Int?
  staffRating            Int?
  foodAndDrinkRating     Int?
}
