generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

// TODO: make the default ID type string and use cuid()?

enum OrganizerType {
  BarOrClub
  EventCollective
  MusicFestival
}

model Organizer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  type     OrganizerType
  websites String[]
  // TODO: location information; want to be able to categorize it to a city for filtering, AND store exact coords to eventually display organizers on a map?

  reviews   Review[]
  // TODO: decide if all of this denormalization is worth it.
  // Calculating this stuff on-the-fly would be more maintainable, but certainly slower
  topGenres Genre[]

  reviewCount Int

  overallRating          Float?
  soundSystemRating      Float?
  djAndMusicRating       Float?
  crowdPlurRating        Float?
  safetyAndComfortRating Float?
  venueRating            Float?
  valueForMoneyRating    Float?
  visualsRating          Float?
  staffRating            Float?
  foodAndDrinkRating     Float?

  // TODO: average expensiveness
}

// TODO: much more sub-genres, somehow grouped through their parent genre
// TODO: make this a model to support user-defined genres?
enum Genre {
  House
  Techno
  Trance
  Dubstep
  DrumAndBass
  Hardstyle
  Trap
  Electro
}

// TODO: make ratings 1-5?
model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organizer   Organizer @relation(fields: [organizerId], references: [id])
  organizerId Int

  description String
  genres      Genre[]

  // TODO: turn this into a dollar sign thing with 4 levels, like google?
  moneySpent Int?

  soundSystemRating      Int
  djAndMusicRating       Int
  crowdPlurRating        Int
  safetyAndComfortRating Int
  venueRating            Int
  valueForMoneyRating    Int
  visualsRating          Int?
  staffRating            Int?
  foodAndDrinkRating     Int?
  // TODO: images
}
